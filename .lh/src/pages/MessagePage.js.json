{
    "sourceFile": "src/pages/MessagePage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1734828648197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1734828675910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,146 +133,5 @@\n                 )}\r\n             </div>\r\n         </div>\r\n     );\r\n-};\r\n-\r\n-export default MessagePage;\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useParams } from 'react-router-dom';\r\n-import axios from 'axios';\r\n-import ConnectWallet from './ConnectWallet';\r\n-import Verify from './Verify';\r\n-\r\n-const MessagePage = () => {\r\n-    const { userId } = useParams(); // Get userId from the URL\r\n-    const [messages, setMessages] = useState([]);\r\n-    const [message, setMessage] = useState('');\r\n-    const [jobOffer, setJobOffer] = useState(false); // Track if a job offer should appear\r\n-    const [jobAnalysis, setJobAnalysis] = useState(''); // Store job analysis result\r\n-\r\n-    // Simulating a message fetching mechanism (you would fetch messages from your backend here)\r\n-    useEffect(() => {\r\n-        setMessages([\r\n-            { sender: 'John Doe', content: 'Hey, how are you?' }        \r\n-        ]);\r\n-    }, [userId]);\r\n-\r\n-    const handleSend = async () => {\r\n-        const newMessage = { sender: 'You', content: message };\r\n-        setMessages([...messages, newMessage]);\r\n-        setMessage('');\r\n-\r\n-        // Simulate sending the message to the backend\r\n-        try {\r\n-            await axios.post('/send-message', { userId, message });\r\n-        } catch (err) {\r\n-            console.error('Error sending message:', err);\r\n-        }\r\n-\r\n-        // Simulate a response from the other user with job phases\r\n-        setTimeout(() => {\r\n-            setMessages(prevMessages => [\r\n-                ...prevMessages,\r\n-                {\r\n-                    sender: 'John Doe',\r\n-                    content: `\r\n-                        <p>I have a job for you! Please follow these steps:</p>\r\n-                        <ul>\r\n-                            <li><strong>Phase 1:</strong> Accept the job offer by clicking the button below.</li>\r\n-                            <li><strong>Phase 2:</strong> Once accepted, the job will be added to your task list.</li>\r\n-                            <li><strong>Phase 3:</strong> After completing the job, you will receive a payment and confirmation.</li>\r\n-                        </ul>\r\n-                    `\r\n-                }\r\n-            ]);\r\n-            setJobOffer(true);\r\n-        }, 1000); // Simulate delay in reply        \r\n-    };\r\n-\r\n-    const handleApproveJob = () => {\r\n-        // Simulate approving the crypto job transaction\r\n-        alert('Success! Transaction approved. Proceed to Phase 2.');\r\n-    };\r\n-\r\n-    const handleAnalyzeJobOffer = async () => {\r\n-        try {\r\n-            // Get the content of the latest job offer message\r\n-            const jobOfferContent = messages\r\n-                .filter(msg => msg.sender === 'John Doe' && msg.content.includes('Phase 1')) // Example condition\r\n-                .map(msg => msg.content)\r\n-                .join('\\n');\r\n-\r\n-            // Send the job offer content to the GPT-based backend for scam analysis\r\n-            const analysisResponse = await axios.post('http://localhost:5000/gpt-response', {\r\n-                prompt: `\r\n-                Analyze the following job offer for potential scams or malicious intent. Respond in a JSON object with the following structure:\r\n-                {\r\n-                    \"isScam\": \"Yes\" or \"No\", // Indicate whether it is a scam\r\n-                    \"analysis\": \"Detailed explanation and relevant warnings about the job offer\"\r\n-                }\r\n-                Job Offer Content:\r\n-                ${jobOfferContent}\r\n-                `\r\n-            });\r\n-\r\n-            // Extract the JSON response\r\n-            const { isScam, analysis } = JSON.parse(analysisResponse.data.reply);\r\n-            if (isScam === 'Yes') {\r\n-                setJobAnalysis(`\r\n-                    <p><strong>Warning:</strong> This job offer may be a scam.</p>\r\n-                    <p>${analysis}</p>\r\n-                `);\r\n-            } else {\r\n-                setJobAnalysis(`\r\n-                    <p><strong>Good News:</strong> This job offer seems legitimate.</p>\r\n-                    <p>${analysis}</p>\r\n-                `);\r\n-            }\r\n-        } catch (err) {\r\n-            console.error('Error analyzing job offer:', err);\r\n-            setJobAnalysis('Failed to analyze the job offer. Please try again.');\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <div>\r\n-            <h1 style={{ textAlign: 'center' }}>Chat with {userId === '1' ? 'John Doe' : 'Unknown User'}</h1>\r\n-            <Verify />\r\n-            <ConnectWallet />\r\n-            <div className=\"chat\">\r\n-                <div className=\"message-list\">\r\n-                    {messages.map((msg, index) => (\r\n-                        <div key={index} className={msg.sender === 'You' ? 'message-right' : 'message-left'}>\r\n-                            <strong>{msg.sender}: </strong>\r\n-                            <div\r\n-                                dangerouslySetInnerHTML={{ __html: msg.content }}\r\n-                            />\r\n-                        </div>\r\n-                    ))}\r\n-                </div>\r\n-                <div className=\"input-area\">\r\n-                    <input\r\n-                        type=\"text\"\r\n-                        value={message}\r\n-                        onChange={(e) => setMessage(e.target.value)}\r\n-                        placeholder=\"Type a message\"\r\n-                    />\r\n-                    <button onClick={handleSend}>Send</button>\r\n-                </div>\r\n-                {/* Show job offer with phases and buttons */}\r\n-                {jobOffer && (\r\n-                    <div className=\"job-offer\">\r\n-                    <button onClick={handleAnalyzeJobOffer}>Analyze Job Offer for Scam</button>\r\n-                        <button onClick={handleApproveJob} style={{ marginLeft: '10px' }}>Approve Job Transaction</button>\r\n-                    </div>\r\n-                )}\r\n-                {/* Display the job analysis result */}\r\n-                {jobAnalysis && (\r\n-                    <div className=\"job-analysis\" dangerouslySetInnerHTML={{ __html: jobAnalysis }} />\r\n-                )}\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default MessagePage;\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1734828988623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,5 +133,7 @@\n                 )}\r\n             </div>\r\n         </div>\r\n     );\r\n-};\n\\ No newline at end of file\n+};\r\n+\r\n+export default MessagePage;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1734828648197,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport ConnectWallet from './ConnectWallet';\r\nimport Verify from './Verify';\r\n\r\nconst MessagePage = () => {\r\n    const { userId } = useParams(); // Get userId from the URL\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [jobOffer, setJobOffer] = useState(false); // Track if a job offer should appear\r\n    const [jobAnalysis, setJobAnalysis] = useState(''); // Store job analysis result\r\n\r\n    // Simulating a message fetching mechanism (you would fetch messages from your backend here)\r\n    useEffect(() => {\r\n        setMessages([\r\n            { sender: 'John Doe', content: 'Hey, how are you?' }        \r\n        ]);\r\n    }, [userId]);\r\n\r\n    const handleSend = async () => {\r\n        const newMessage = { sender: 'You', content: message };\r\n        setMessages([...messages, newMessage]);\r\n        setMessage('');\r\n\r\n        // Simulate sending the message to the backend\r\n        try {\r\n            await axios.post('/send-message', { userId, message });\r\n        } catch (err) {\r\n            console.error('Error sending message:', err);\r\n        }\r\n\r\n        // Simulate a response from the other user with job phases\r\n        setTimeout(() => {\r\n            setMessages(prevMessages => [\r\n                ...prevMessages,\r\n                {\r\n                    sender: 'John Doe',\r\n                    content: `\r\n                        <p>I have a job for you! Please follow these steps:</p>\r\n                        <ul>\r\n                            <li><strong>Phase 1:</strong> Accept the job offer by clicking the button below.</li>\r\n                            <li><strong>Phase 2:</strong> Once accepted, the job will be added to your task list.</li>\r\n                            <li><strong>Phase 3:</strong> After completing the job, you will receive a payment and confirmation.</li>\r\n                        </ul>\r\n                    `\r\n                }\r\n            ]);\r\n            setJobOffer(true);\r\n        }, 1000); // Simulate delay in reply        \r\n    };\r\n\r\n    const handleApproveJob = () => {\r\n        // Simulate approving the crypto job transaction\r\n        alert('Success! Transaction approved. Proceed to Phase 2.');\r\n    };\r\n\r\n    const handleAnalyzeJobOffer = async () => {\r\n        try {\r\n            // Get the content of the latest job offer message\r\n            const jobOfferContent = messages\r\n                .filter(msg => msg.sender === 'John Doe' && msg.content.includes('Phase 1')) // Example condition\r\n                .map(msg => msg.content)\r\n                .join('\\n');\r\n\r\n            // Send the job offer content to the GPT-based backend for scam analysis\r\n            const analysisResponse = await axios.post('http://localhost:5000/gpt-response', {\r\n                prompt: `\r\n                Analyze the following job offer for potential scams or malicious intent. Respond in a JSON object with the following structure:\r\n                {\r\n                    \"isScam\": \"Yes\" or \"No\", // Indicate whether it is a scam\r\n                    \"analysis\": \"Detailed explanation and relevant warnings about the job offer\"\r\n                }\r\n                Job Offer Content:\r\n                ${jobOfferContent}\r\n                `\r\n            });\r\n\r\n            // Extract the JSON response\r\n            const { isScam, analysis } = JSON.parse(analysisResponse.data.reply);\r\n            if (isScam === 'Yes') {\r\n                setJobAnalysis(`\r\n                    <p><strong>Warning:</strong> This job offer may be a scam.</p>\r\n                    <p>${analysis}</p>\r\n                `);\r\n            } else {\r\n                setJobAnalysis(`\r\n                    <p><strong>Good News:</strong> This job offer seems legitimate.</p>\r\n                    <p>${analysis}</p>\r\n                `);\r\n            }\r\n        } catch (err) {\r\n            console.error('Error analyzing job offer:', err);\r\n            setJobAnalysis('Failed to analyze the job offer. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{ textAlign: 'center' }}>Chat with {userId === '1' ? 'John Doe' : 'Unknown User'}</h1>\r\n            <Verify />\r\n            <ConnectWallet />\r\n            <div className=\"chat\">\r\n                <div className=\"message-list\">\r\n                    {messages.map((msg, index) => (\r\n                        <div key={index} className={msg.sender === 'You' ? 'message-right' : 'message-left'}>\r\n                            <strong>{msg.sender}: </strong>\r\n                            <div\r\n                                dangerouslySetInnerHTML={{ __html: msg.content }}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"input-area\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Type a message\"\r\n                    />\r\n                    <button onClick={handleSend}>Send</button>\r\n                </div>\r\n                {/* Show job offer with phases and buttons */}\r\n                {jobOffer && (\r\n                    <div className=\"job-offer\">\r\n                    <button onClick={handleAnalyzeJobOffer}>Analyze Job Offer for Scam</button>\r\n                        <button onClick={handleApproveJob} style={{ marginLeft: '10px' }}>Approve Job Transaction</button>\r\n                    </div>\r\n                )}\r\n                {/* Display the job analysis result */}\r\n                {jobAnalysis && (\r\n                    <div className=\"job-analysis\" dangerouslySetInnerHTML={{ __html: jobAnalysis }} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessagePage;\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport ConnectWallet from './ConnectWallet';\r\nimport Verify from './Verify';\r\n\r\nconst MessagePage = () => {\r\n    const { userId } = useParams(); // Get userId from the URL\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [jobOffer, setJobOffer] = useState(false); // Track if a job offer should appear\r\n    const [jobAnalysis, setJobAnalysis] = useState(''); // Store job analysis result\r\n\r\n    // Simulating a message fetching mechanism (you would fetch messages from your backend here)\r\n    useEffect(() => {\r\n        setMessages([\r\n            { sender: 'John Doe', content: 'Hey, how are you?' }        \r\n        ]);\r\n    }, [userId]);\r\n\r\n    const handleSend = async () => {\r\n        const newMessage = { sender: 'You', content: message };\r\n        setMessages([...messages, newMessage]);\r\n        setMessage('');\r\n\r\n        // Simulate sending the message to the backend\r\n        try {\r\n            await axios.post('/send-message', { userId, message });\r\n        } catch (err) {\r\n            console.error('Error sending message:', err);\r\n        }\r\n\r\n        // Simulate a response from the other user with job phases\r\n        setTimeout(() => {\r\n            setMessages(prevMessages => [\r\n                ...prevMessages,\r\n                {\r\n                    sender: 'John Doe',\r\n                    content: `\r\n                        <p>I have a job for you! Please follow these steps:</p>\r\n                        <ul>\r\n                            <li><strong>Phase 1:</strong> Accept the job offer by clicking the button below.</li>\r\n                            <li><strong>Phase 2:</strong> Once accepted, the job will be added to your task list.</li>\r\n                            <li><strong>Phase 3:</strong> After completing the job, you will receive a payment and confirmation.</li>\r\n                        </ul>\r\n                    `\r\n                }\r\n            ]);\r\n            setJobOffer(true);\r\n        }, 1000); // Simulate delay in reply        \r\n    };\r\n\r\n    const handleApproveJob = () => {\r\n        // Simulate approving the crypto job transaction\r\n        alert('Success! Transaction approved. Proceed to Phase 2.');\r\n    };\r\n\r\n    const handleAnalyzeJobOffer = async () => {\r\n        try {\r\n            // Get the content of the latest job offer message\r\n            const jobOfferContent = messages\r\n                .filter(msg => msg.sender === 'John Doe' && msg.content.includes('Phase 1')) // Example condition\r\n                .map(msg => msg.content)\r\n                .join('\\n');\r\n\r\n            // Send the job offer content to the GPT-based backend for scam analysis\r\n            const analysisResponse = await axios.post('http://localhost:5000/gpt-response', {\r\n                prompt: `\r\n                Analyze the following job offer for potential scams or malicious intent. Respond in a JSON object with the following structure:\r\n                {\r\n                    \"isScam\": \"Yes\" or \"No\", // Indicate whether it is a scam\r\n                    \"analysis\": \"Detailed explanation and relevant warnings about the job offer\"\r\n                }\r\n                Job Offer Content:\r\n                ${jobOfferContent}\r\n                `\r\n            });\r\n\r\n            // Extract the JSON response\r\n            const { isScam, analysis } = JSON.parse(analysisResponse.data.reply);\r\n            if (isScam === 'Yes') {\r\n                setJobAnalysis(`\r\n                    <p><strong>Warning:</strong> This job offer may be a scam.</p>\r\n                    <p>${analysis}</p>\r\n                `);\r\n            } else {\r\n                setJobAnalysis(`\r\n                    <p><strong>Good News:</strong> This job offer seems legitimate.</p>\r\n                    <p>${analysis}</p>\r\n                `);\r\n            }\r\n        } catch (err) {\r\n            console.error('Error analyzing job offer:', err);\r\n            setJobAnalysis('Failed to analyze the job offer. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{ textAlign: 'center' }}>Chat with {userId === '1' ? 'John Doe' : 'Unknown User'}</h1>\r\n            <Verify />\r\n            <ConnectWallet />\r\n            <div className=\"chat\">\r\n                <div className=\"message-list\">\r\n                    {messages.map((msg, index) => (\r\n                        <div key={index} className={msg.sender === 'You' ? 'message-right' : 'message-left'}>\r\n                            <strong>{msg.sender}: </strong>\r\n                            <div\r\n                                dangerouslySetInnerHTML={{ __html: msg.content }}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"input-area\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={message}\r\n                        onChange={(e) => setMessage(e.target.value)}\r\n                        placeholder=\"Type a message\"\r\n                    />\r\n                    <button onClick={handleSend}>Send</button>\r\n                </div>\r\n                {/* Show job offer with phases and buttons */}\r\n                {jobOffer && (\r\n                    <div className=\"job-offer\">\r\n                    <button onClick={handleAnalyzeJobOffer}>Analyze Job Offer for Scam</button>\r\n                        <button onClick={handleApproveJob} style={{ marginLeft: '10px' }}>Approve Job Transaction</button>\r\n                    </div>\r\n                )}\r\n                {/* Display the job analysis result */}\r\n                {jobAnalysis && (\r\n                    <div className=\"job-analysis\" dangerouslySetInnerHTML={{ __html: jobAnalysis }} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MessagePage;\r\n"
        }
    ]
}